There are two APIs that SMTG uses,
    iAPI = The communication protocol for interfaces and plugins.
    pAPI = The implementation specification for plugins only.
    
   
    As you can see, pAPI is much more involved so that will be defined later. 
Right now I will layout the comm protocol (iAPI), which is most likely the one 
that you will get most familiar.

============================
iAPI
 - Connection protocol
 - Command Message Structure
 - Error message Structure
 - Alert Message Structure
=================================


#######
  Connection Protocol
#######
    First things first, connecting to a running daemon: This is done by creating
a TCP socket in the language of your choice and sending the interface ID through
it. The interface ID tells smtg-d who is trying to talk to it. 
    If you are bulding an interface you first need to request an interface from
smtg-d through the enrollment process. (see registration section) Once you have
your ID, I recommend hard coding it into your interface. Otherwise you can place
it in a config file.
    Here are the steps your interface must go through to connect and start 
communicating:
    1.) connect to socket via IP and Port.
    2.) send interface ID once connected ("i000000001").
    3a.) if response is <proceed>: 
        4.) smtg is ready to accept a <command>. send one.
        5.) accept response, loop back to 4.
    3b.) if response is an <error>, you should consult the Error guide.

       
#######
  Command Message Structure
#######    
    <command> messages are structured as JSON objects. Here is the their 
structure:
    
        {"message" : "cmd",
         "source"  : "plugin-name"/null,
         "name"    : "name of command",
         "args"    : ["list", "of", "arguments"],
         "kill"    : true/false }
         
  Explaination:
    - message: this tells smtg that it is a command type message to parse.
    - source: this is the name of the plugin to run the command through, or
        if source is not present, or its set to null, smtg tries to
        run the command.
    - name: this is the name of the command to run at the source.
    - args: this is a list of arguments for the command. If there are no 
        arguments needed for the command args can be removed or you can use
        a null.
    - kill: this tells smtg that we only want to run this one last command and 
        then we will kill our connection. Typically this is used when querying
        for the daemon status. This is optional as it defaults to false.
  Examples:
    - Here is an example to just grab the daemon stats real quick after the 
      connecting process is complete:
                {"message":"cmd","name":"stats","kill":true}
    - Heres a more complicated one to update your facebook status through an
      imaginary plugin:
          {"message":"cmd","source":"my-fb-plugin",
            "name":"updateStatus","args":["This is cool!!!"]}
    - Another example, this time asking the daemon to list the plugins that
      are attached to it:
                 {"message":"cmd","name":"list-plugins"}
                 
#######
  Error Message Structure
#######                 
     <error> messages are structured as JSON objects. Here is the their 
structure:
    
        {"message" : "err",
         "source"  : "plugin-name"/null,
         "code"    : 1823012,
         "value"   : "error message",
         "dead"    : true/false,
         "kill"    : true/false }
         
  Explaination:
    - message: this tells you that it is an error type message to parse.
    - source: the source of the error, if this value is missing or set to null
        it means the error came from smtg itself.
    - code: some errors are very common, so instead of you having to parse the
        value field, there is also this code information.
    - value: the value of the error, normally human readable.
    - dead: if the daemon crashed, or is in the process of, it will set this
        to true.
    - kill: if the connection needs to be terminated, this will be set to true.       


#######
  Alert Message Structure
#######                 
     <alert> messages are structured as JSON objects. Here is the their 
structure:
    
        {"message" : "alrt",
         "source"  : "plugin-name",
         "value"   : value }
         
  Explaination:
    - message: this tells you that it is an alert type message to parse.
    - source: the source of the alert. Only plugins can send alerts, so it will 
        be the name of the plugin.
    - value: the value of the alert. This can be anything from an array of
        values, to an float value, to another object inside it.


=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=



============================
pAPI
 - FeedPlugin set up
 - AlertPlugin set up
 - ????
 - Profit
=================================




























